Python
-------
>> Python is a High-level, Interpretted and Object Oriented Programming Language.

Compilation ---> compiler translates the entire program into machine code before execution. Ex: Java, C..
Interpretation --> Interpretter translates and executes the code line by line. Ex: Python

print
-------
>> prints a data at the output.
print(data)

input
-----
>> prompt input from user.
>> always return string value
input(str)


Extension for python file ---> .py 
command to execute a python file --> "python filname.py"

Syntax of Python 
-----------------
>> python is case-sensitive.(a is not equal to A)
>> Indentation matters. (white spaces before a line of code)
>> python is dynamically typed language.

Comments 
---------
Single line comments --> #
Multiple line comments --> '''  comment  '''

Variables
----------
>> It is a named storage that holds value in a memory.
varName=data

Naming Rules:
-------------
>> It can contain letters, digits and underscores (_)
>> It can start with letter or _
>> It cannot be a reserved keyword.

Datatypes 
----------
Integer --> whole number. Ex: -4,-3,-43,0,1,2,3
Float --> Decimal number. Ex: 3.14

String --> sequence of char wrapped with either '' or ""


String Operations 
-----------------
concatination --> attaching strings together --> +
repetion --> *  
Membership ---> in, not (boolean) 

In built methods for strings 
------------------------------
.upper(str) ---> converts a str into uppercase
.lower(str) ---> converts a str into lowercase
.title() --> converts every first letter of word into uppercase
.capitalize()

Searching and counting 
.count(subStr) --> counts the number of occurance
.find(subStr) --> finds index. -1 (not occured)

replacing 
.replace(old,new) 

splitting and joining
str ---> list .split(char)
list ---> str  str.join(lis)

trimming 
.strip(str) --> white spaces at beg and end

Validation methods 
.isalpha()--> 'animal1&'
.isdigit()--> '123'
.isalnum()
.isupper()
.islower()

String Formatting --> f" {var1}. {var2}........ "
string is immutable

Boolean --> True or False

Type casting 
------------
type(obj)---> finds the datatype of an obj. 

int() --> convert into integer
str()  --> convert into string 
float()  --> convert into float
list()
tuple()
set()
dict()

Operators
----------
34 * 2 = 68

* ---> operator 
34, 2 --> operands 
68 --> result 

>> Operator is a symbol that performs an operation on one or more operands.

Arithmetic Operators 
---------------------
Additon ---> +
Subtraction ---> -
Multiplication --> *
Division ---> /
Floor Division --> //
Modulus --> % (reminder)
Exponentiation --> ** Ex: 2**2--> 2 power 2 --> 4

(BODMAS) 

Comparison Operators
--------------------
>> Used to compare two values. They return Boolean Value.

== --> equal
!= --> not equal
< --> lesser than
> --> greater than
<= --> lesser than or equal
>= --> greater than or equal

Assignment Operators 
----------------------
= --> assign
+= --> add and assign
-= --> sub and assign
*= --> mul and assign 
/= --> div and assign 
//= floor div and assign
%= mod and assign 
**= expo and assign

Logical Operators 
------------------ (Boolean --> Boolean)
AND --> and --> True if both are true.
OR  --> or  --> True if any one is true.
NOT --> not --> Reverses boolean result. True --> False 

Bitwise operators 
-----------------
>> Operate on binary representation of integers.
AND --> & --> and operation between bits. Ex: 7&16
OR --> | --> or operation between bits. 7 | 16
XOR --> ^ --> X-OR operation between bits. 8 ^ 10

NOT --> ~ --> not operation with bits. Ex: ~7 (~n=-(n+1))
negative number --> 2's complement of absolute number
2's comp --> 1's comp(reversing bit) + 1

left shift --> moving bits towards left. <<. ex: 12<<2.
right shift --> moving bits towards right. >>. ex: 12>>2.


Iterable
---------
An iterable object is any python object that can return its members one at a time.
Ex: String, List, iterable object
"Hello world" ---> 'H','e'
index number ---> starts with 0. iterableObj[ind]

Membership ---> in, not (boolean) 
len(iterableObj) ---> returns length of obj.

Indexing and Slicing 
----------------------
indexing ---> iterableObj[index] --> accessing one of the members of an iterableObject.
a=[324,4,32,54,67,78,65,45,43]
negative indexing ---> a[-1]

Slicing --> Extracting a part of iterable object.
iterableObj[start:] --> Ex: "good morning" -> [5:] --> "morning"
iterableObj[:end] --> Ex: "good morning" --> [:5] --> "good "
iterableObj[start:end]
iterable[::final] --> reverse

Control Flow
-------------
>> Control flow determines the order in which statements are executed in a program.

Conditional statements
-----------------------
if condition:
    block of code 
True --> executes the block of code. False --> Ignore the block of code.
elif condidion:
    block of code.
else:
    block code 

Nested If 
----------
>> If block inside another if block.

if cond1:
    if cond2:
        print("Hello")

Loops 
--------
>> Loops is used to repeat a block of code multiple times until a condition met or an iterable is exhausted.

For loop 
While Loop 

While Loop 
------------
while condition:
    block of code

>> As long as the condition is True it will keep executing the block of code.
>> number of iteration is not known.

For Loop 
---------
>> It is used to iterate over a sequence(like string, list, tuple.....)
>>When the number of iteration is known

for var in sequence:
    block of code

Range ---> used to create a temporary iterable object.
-------------------------------------------------------
range(10) ---> [0,1,2,3,4,5,6,7,8,9]
range(start,end) ---> range(10,20) --> [10,11....19]
range(start,end,step) --> range(10,20,2) -->[10,12,14,16,18]

Control statements 
-------------------
Break --> it will just break the loop
Continue --> It will skip the current iteration

Data structures --> List, Tuple, Set, Dict
-----------------------------------------
List (iterable object)
-----
>> It is an ordered, mutable and indexed collection of elements.
>> [] --> allows duplicate
--> Ordered: The elements have a fixed position (index).

[ele1, ele2, ele3......]

In-built methods 
-------------------
.append(ele) --> adds an element at thhe end
.extend(ele1,ele2.....)--> adds multiple element at the end.
.insert(pos, ele) ---> adds element at the specified position
.remove(ele) --> it removes the specified elements from a list(first occurance)
.pop(ind) ---> removes an element by its index number
.pop() --> removes last element
.clear() --> removes everyting.
.index(ele) --> finds index number of given element
.count(ele) --> finds number of occurances
.sort() --> arrange list in ascending order
.reverse()

Tuple 
------
>>A tuple is an ordered, immutable sequence of items.
>> (ele1,ele2....) allows duplicates

packing/unpacking 
------------------
person=('KP Karuppu',28)
name= person[0]
age= person[1]
name,age=person

In built methods
----------------
.count(ele)
.index(ele)

Set 
-----
>> It is unordered, mutable and unidexed collection of unique elements.
{ele1, ele2......} does not allow duplicates.

in built methods
-----------------
.add(ele)
.remove(ele)

.intersection() --> common elements between two sets
.union() --> all the elements from both sets.
.difference() --> unique elements in a set

Dict 
------
>> It is mutable key-value datastructure.
key-value --> {key1:val1, key2:val2......}
values --> any datatype 

In built methods 
-------------------
.keys() --> returns every key from dict.
.values()
.items() --> returns keay-values pairs.Ex: [(key1,value1),(key2,value)...]


Functions and Scopes 
---------------------
>> It is a block of code that performs a specfic task and can be reused multiple times.

>> In built Functions
>> User Defined Functions.

def fnName():
    block of code

calling --> fnName()

Parameters and Arguements 
-----------------------------
P -> variables that we create while defining a function.
A -> the values we are passing to those variables

Positional Arguements --> Order matters
Keyword arguement --> assigning value by mentioning the Parameters name 
Default Arguements --> assigning default value to Parameter while creating a function

Return Keyword 
---------------
>> stop a function 
>> return a data to the caller

Scopes 
-------
>> Scope refers to the region of the program where a variable is recognized and accessible.

Local scope 
-------------
>> A variable created inside a function is local -- it exists only while the function runs.

Global
--------
A variable declared outside any function is Global. can be accessed anywhere